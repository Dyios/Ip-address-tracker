{"version":3,"sources":["api/api.js","components/IPSearchBar/IPSearchBar.js","components/IPInfo/IPInfoElement/IPInfoElement.js","components/IPInfo/IPInfo.js","components/HeadSection/HeadSection.js","images/icon-location.svg","components/Map/Map.js","App.js","reportWebVitals.js","index.js"],"names":["getIPAdressInfo","ipAddress","a","apiKey","process","ipOrDomain","url","fetch","then","res","status","json","Error","IPSearchBar","ipAddressState","setIpAddress","useState","inputIpAddress","setinputIpAddress","handleSubmit","e","preventDefault","info","console","log","catch","alert","useEffect","test","ip","className","onSubmit","type","placeholder","value","onInput","event","target","onClick","IPInfoElement","label","data","IPInfo","location","city","country","postalCode","timezone","isp","map","index","HeadSection","myMarker","L","Icon","iconUrl","marker","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Map","pos","ChangeView","center","useMap","setView","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","Marker","position","icon","Popup","App","ipAddressInfo","setipAddressInfo","lat","lng","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b4c9b9f.chunk.js","sourcesContent":["export async function getIPAdressInfo(ipAddress) {\r\n    const apiUrl = `https://geo.ipify.org/api/v1`;\r\n    const apiKey = `apiKey=${process.env.REACT_APP_API_KEY}`\r\n    const ipOrDomain = `&domain=${ipAddress}`\r\n\r\n\r\n    const url = `${apiUrl}?${apiKey}${ipOrDomain}`\r\n    return fetch(url)\r\n        .then(res => {\r\n            if(res.status === 200)\r\n                return res.json()\r\n            else\r\n                throw new Error('wrong input')\r\n        })\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './IPSearchBar.css'\r\n\r\nimport { getIPAdressInfo } from '../../api/api'\r\n\r\nfunction IPSearchBar({ ipAddressState }) {\r\n    const [ipAddress, setIpAddress] = ipAddressState;\r\n    const [inputIpAddress, setinputIpAddress] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!/[a-zA-Z]/g.test(inputIpAddress))\r\n            setinputIpAddress(ipAddress.ip)\r\n    }, [ipAddress])\r\n\r\n    function handleIPAdressInput(event) {\r\n        setinputIpAddress(event.target.value)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        getIPAdressInfo(inputIpAddress)\r\n            .then(info => {console.log(info);setIpAddress(info)})\r\n            .catch(e => alert(e))\r\n    }\r\n\r\n    return (\r\n        <form className='IP-search-bar-container' onSubmit={handleSubmit}>\r\n            <input className='IP-input' type='text'\r\n                placeholder='Search for any IP or domain'\r\n                value={inputIpAddress}\r\n                onInput={handleIPAdressInput}\r\n            />\r\n            <input className='IP-search' type='button' onClick={handleSubmit} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default IPSearchBar\r\n","import React from 'react'\r\nimport './IPInfoElement.css'\r\n\r\nfunction IPInfoElement({label, data}) {\r\n    //console.log(data)\r\n    return (\r\n        <div className='IP-info-element'>\r\n            <div className='IP-info-lable' >{label}</div>\r\n            <div className='IP-info-data' >{data}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IPInfoElement\r\n","import React from 'react'\r\nimport './IPInfo.css'\r\n\r\nimport IPInfoElement from './IPInfoElement/IPInfoElement'\r\n\r\nfunction IPInfo({ipAddress}) {\r\n    //const [ipAddress, setIpAddress] = ipAddressState;\r\n\r\n    const labels = [\"IP ADRESS\", \"LOCATION\", \"TIMEZONE\", \"ISP\"];\r\n    const data = ipAddress.ip !== '' ?\r\n    [\r\n        ipAddress.ip,\r\n        `${ipAddress.location.city}, ${ipAddress.location.country} ${ipAddress.location.postalCode}`,\r\n        `UTC ${ipAddress.location.timezone}`,\r\n        ipAddress.isp\r\n    ]\r\n    :\r\n    ['','','','']// so the fields don't render with : , and utc befor the data is fetched\r\n\r\n    return (\r\n        <div className='IP_info_container'>\r\n            {\r\n                labels.map((label, index)=><IPInfoElement key={index} label={label} data={data[index]}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IPInfo\r\n","import React from 'react'\r\nimport './HeadSection.css'\r\n\r\nimport IPSearchBar from '../IPSearchBar/IPSearchBar'\r\nimport IPInfo from '../IPInfo/IPInfo'\r\n\r\nfunction HeadSection({ipAddressState}) {\r\n    return (\r\n        <header>\r\n            <h2 className='app-name'>IP Address Tracker</h2>\r\n            <IPSearchBar ipAddressState={ipAddressState} />\r\n            <IPInfo ipAddress={ipAddressState[0]} />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default HeadSection\r\n","export default __webpack_public_path__ + \"static/media/icon-location.7e6459d2.svg\";","import React from 'react'\r\nimport './Map.css'\r\n\r\nimport marker from '../../images/icon-location.svg'\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet'\r\nimport L from 'leaflet';\r\n\r\nconst myMarker = new L.Icon({\r\n    iconUrl: marker,//require('./images/icon-location.svg'),\r\n    iconRetinaUrl: marker,//require('./images/icon-location.svg'),\r\n    iconAnchor: null,\r\n    popupAnchor: null,\r\n    shadowUrl: null,\r\n    shadowSize: null,\r\n    shadowAnchor: null,\r\n    iconSize: [40, 50],\r\n  });\r\n\r\nfunction Map({pos}) {\r\n    function ChangeView({ center }) {\r\n        const map = useMap();\r\n        map.setView(center);\r\n        return null;\r\n      }\r\n\r\n    return (\r\n        <MapContainer className='map' center={pos} zoom={16} scrollWheelZoom={false}>\r\n        <ChangeView center={pos} /> \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={pos} icon={myMarker} >\r\n          <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n        </Marker>\r\n      </MapContainer>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css'\n\nimport HeadSection from './components/HeadSection/HeadSection'\nimport Map from './components/Map/Map'\nimport { getIPAdressInfo } from './api/api'\n\nfunction App() {\n  const [ipAddressInfo, setipAddressInfo] = useState({\n    \"ip\": \"\",\n    \"location\": {\n      \"city\": \"\",\n      \"lat\": 0,\n      \"lng\": 0,\n      \"country\": \"\",\n      \"postalCode\": \"\",\n      \"timezone\": \"\",\n    },\n    \"isp\": \"\",\n  })\n\n  useEffect(() => {\n    getIPAdressInfo('').then(info => {\n      console.log(info);\n      setipAddressInfo(info);\n    })\n    .catch(e=>alert(e))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <HeadSection ipAddressState={[ipAddressInfo, setipAddressInfo]} />\n      <Map pos={[ipAddressInfo.location.lat, ipAddressInfo.location.lng]} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}